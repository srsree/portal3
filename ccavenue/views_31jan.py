from django.shortcuts import render

from ccavenue.ccavutil import *
from .models import *
from mcms.models import *
from django.core.mail import send_mail, EmailMessage, BadHeaderError
from django.template import Context
from django.template.loader import get_template
from django.contrib.auth.models import User

# CCAvenue views here

# Configure:  
# Every merchant receives a unique set of keys for transaction processing. These need to be configured in the transaction file used to initiate the payment process. 

# From your MARS account under Settings tab -> API Keys page; copy the merchant id, access code and secret encryption. Set these values in the file (e.g. ccavRequestHandler.php) downloaded with the integration kit.

# merchant_id of CCAvenue account :Merchant Id is a unique identifier generated by CCAvenue for each activated merchant.

# After successfully testing the integration, merchant can move to the production environment by changing the URL.
# CCAvenue Test URL:
#  https://test.ccavenue.com
# CCAvenue Production URL:
# https://secure.ccavenue.com

# To test the integration login to your CCAvenue M.A.R.S account, under Settings tab > API Keys page; copy the following credentials:
# Merchant ID
# Access Code
# Encryption Key


'''Error Codes '''
# Error Codes
# Error Code	Short Message	Long Message	Correcting this Error
# 10002	Authentication Failed	Merchant Authentication failed	This error can be caused by an incorrect merchant ID, an incorrect access code, or if the order originates from an unregistered URL. Make sure that all three of these values are correct. For your security, CCAvenue does not report exactly which of these three values might be in error.
# 21001	Missing Parameter	order_id:Required parameter missing	Ensure that the order_id parameter is not blank.
# 21002	Missing Parameter	currency: Required paramter missing	Ensure that the currency parameter is not blank.
# 21003	Missing Parameter	amount:Required parameter missing	Ensure that the amount parameter is not blank.
# 21004	Missing Parameter	billing_name: Required parameter missing	Ensure that the billing_name parameter is not blank.
# 21005	Missing Parameter	billing_address: Required parameter missing	Ensure that the billing_address parameter is not blank.
# 21006	Missing Parameter	billing_city: Required parameter missing	Ensure that the billing_city parameter is not blank.
# 21007	Missing Parameter	billing_state: Required parameter missing	Ensure that the billing_state parameter is not blank.
# 21008	Missing Parameter	billing_zip: Required parameter missing	Ensure that the billing_zip parameter is not blank.
# 21009	Missing Parameter	billing_country: Required parameter missing	Ensure that the billing_country parameter is not blank.
# 21010	Missing Parameter	billing_tel: Required parameter missing	Ensure that the billing_tel parameter is not blank.
# 21011	Missing Parameter	billing_email: Required parameter missing	Ensure that the billing_email parameter is not blank.
# 21012	Missing Parameter	delivery_name: Required parameter missing	Ensure that the delivery_name parameter is not blank.
# 21013	Missing Parameter	delivery_address: Required parameter missing	Ensure that the delivery_address parameter is not blank.
# 21014	Missing Parameter	delivery_city: Required parameter missing	Ensure that the billing_city parameter is not blank.
# 21015	Missing Parameter	delivery_state: Required parameter missing	Ensure that the delivery_state parameter is not blank.
# 21016	Missing Parameter	delivery_zip: Required parameter missing	Ensure that the delivery_zip parameter is not blank.
# 21017	Missing Parameter	delivery_country: Required parameter missing	Ensure that the delivery_country parameter is not blank.
# 21018	Missing Parameter	delivery_tel: Required parameter missing	Ensure that the delivery_tel parameter is not blank.
# 21020	Missing Parameter	card_name: Required parameter missing	Ensure that the card_name parameter is not blank.
# 21021	Missing Parameter	card_type: Required parameter missing	Ensure that the card_type parameter is not blank.
# 21022	Missing Parameter	payment_option: Required parameter missing	Ensure that the payment_option parameter is not blank.
# 21023	Missing Parameter	card_number: Required parameter missing	Ensure that the card_number parameter is not blank.
# 21024	Missing Parameter	expiry_month: Required parameter missing	Ensure that the expiry_month parameter is not blank.
# 21025	Missing Parameter	expiry_year: Required parameter missing	Ensure that the expiry_year parameter is not blank.
# 21026	Missing Parameter	cvv_number: Required parameter missing	Ensure that the cvv_number parameter is not blank.
# 21027	Missing Parameter	issuing_bank: Required parameter missing	Ensure that the issuing_bank parameter is not blank.
# 21028	Missing Parameter	emi_plan_id: Required parameter missing	Ensure that the emi_plan_id parameter is not blank.
# 21029	Missing Parameter	emi_tenure_id: Required parameter missing	Ensure that the emi_tenure_id parameter is not blank.
# 21031	Missing Parameter	mm_id: Required parameter missing	Ensure that the mmid parameter is not blank.
# 21032	Missing Parameter	otp: Required parameter missing	Ensure that the otp parameter is not blank.
# 31001	Invalid Parameter	order_id:Invalid Parameter	Ensure that the order_id parameter is not Invalid.
# 31002	Invalid Parameter	currency: Invalid Parameter	Ensure that the currency parameter is not Invalid.
# 31003	Invalid Parameter	amount:Invalid Parameter	Ensure that the amount parameter is not Invalid.
# 31004	Invalid Parameter	billing_name: Invalid Parameter	Ensure that the billing_name parameter is not Invalid.
# 31005	Invalid Parameter	billing_address: Invalid Parameter	Ensure that the billing_address parameter is not Invalid.
# 31006	Invalid Parameter	billing_city: Invalid Parameter	Ensure that the billing_city parameter is not Invalid.
# 31007	Invalid Parameter	billing_state: Invalid Parameter	Ensure that the billing_state parameter is not Invalid.
# 31008	Invalid Parameter	billing_zip: Invalid Parameter	Ensure that the billing_zip parameter is not Invalid.
# 31009	Invalid Parameter	billing_country: Invalid Parameter	Ensure that the billing_country parameter is not Invalid.
# 31010	Invalid Parameter	billing_tel: Invalid Parameter	Ensure that the billing_tel parameter is not Invalid.
# 31011	Invalid Parameter	billing_email: Invalid Parameter	Ensure that the billing_email parameter is not Invalid.
# 31012	Invalid Parameter	delivery_name: Invalid Parameter	Ensure that the delivery_name parameter is not Invalid.
# 31013	Invalid Parameter	delivery_address: Invalid Parameter	Ensure that the delivery_address parameter is not Invalid.
# 31014	Invalid Parameter	delivery_city: Invalid Parameter	Ensure that the billing_city parameter is not Invalid.
# 31015	Invalid Parameter	delivery_state: Invalid Parameter	Ensure that the delivery_state parameter is not Invalid.
# 31016	Invalid Parameter	delivery_zip: Invalid Parameter	Ensure that the delivery_zip parameter is not Invalid.
# 31017	Invalid Parameter	delivery_country: Invalid Parameter	Ensure that the delivery_country parameter is not Invalid.
# 31018	Invalid Parameter	delivery_tel: Invalid Parameter	Ensure that the delivery_tel parameter is not Invalid.
# 31020	Invalid Parameter	card_name: Invalid Parameter	Ensure that the card_name parameter is not Invalid.
# 31021	Invalid Parameter	card_type: Invalid Parameter	Ensure that the card_type parameter is not Invalid.
# 31022	Invalid Parameter	payment_option: Invalid Parameter	Ensure that the payment_option parameter is not Invalid.
# 31023	Invalid Parameter	card_number: Invalid Parameter	Ensure that the card_number parameter is not Invalid.
# 31024	Invalid Parameter	expiry_month: Invalid Parameter	Ensure that the expiry_month parameter is not Invalid.
# 31025	Invalid Parameter	expiry_year: Invalid Parameter	Ensure that the expiry_year parameter is not Invalid.
# 31026	Invalid Parameter	cvv_number: Invalid Parameter	Ensure that the cvv_number parameter is not Invalid.
# 31027	Invalid Parameter	issuing_bank: Invalid Parameter	Ensure that the issuing_bank parameter is not Invalid.
# 31028	Invalid Parameter	emi_plan_id: Invalid Parameter	Ensure that the emi_plan_id parameter is not Invalid.
# 31029	Invalid Parameter	emi_tenure_id: Invalid Parameter	Ensure that the emi_tenure_id parameter is not Invalid.
# 31030	Invalid Parameter	order_uid: Invalid Parameter	Ensure that the order_uid parameter is not Invalid.
# 31031	Invalid Parameter	mm_id: Invalid Parameter	Ensure that the mm_id parameter is not Invalid.
# 31032	Invalid Parameter	otp: Invalid Parameter	Ensure that the otp parameter is not Invalid.
# 31034	Invalid Parameter	Selected EMI facility is not valid for entered card	As verified by bank EMI transactions are not enabled on this card.

# Response parameters

# order_id	Unique ID sent by the merchant at the time of initiating the transaction.	Alphanumeric (30)
# tracking_id	Unique payment reference number generated by CCAvenue for each order.	Numeric (12)
# bank_ref_no	Reference number generated by the bank for the transaction.	Alphanumeric
# order_status	Status of the transaction. (Success,Failure, Aborted,Invalid)
#failure_message	Reason for failure.	Alphanumeric
#payment_mode	Mode of payment used by the customer (Credit Card Net banking Debit Card Cash Card Mobile Payment)
#card_name	The name of the card/bank used by the customer to make the payment. Credit Card - Visa, Mastercard, Amex Netbanking - ICICI, HDFC, SBI etc.	Alphanumeric
#status_code	Authorization code received from the bank.	Numeric (3)
#status_message	Authorization status message received from the bank.	Alphanumeric (150)
#currency	Currency code in which the transaction was processed. (INR - Indian Rupee ,USD - United States Dollar, SGD - Singapore Dollar,GBP - Pound Sterling,EUR - Euro, official currency of Eurozone	Alphabets (3))

#amount	Order amount	Numeric (12, 2)
#billing_ name	Name of the customer	Alphabets (60)
#billing_ address	Customer's billing address	Alphanumeric (150)
#billing_ city	Customer's billing city	Alphabets (30)
#billing_ state	Customer's billing state	Alphabets (30)
#billing_ zip	Customer's billing zip code	Alphanumeric (15)
#billing_ country	Customer's billing country	Alphabets (50)
#billing_ tel	Customer's phone number	Numeric (20)
#billing_ email	Customer's email address	Alphanumeric (70)
#delivery_ name	Recipient's name	Alphabets (60)
#delivery_ address	Shipping address	Alphanumeric (150)
#delivery_ city	Shipping city	Alphabets (30)
#delivery_ state	Shipping state	Alphabets (30)
#delivery_ zip	Shipping zip code	Alphanumeric (15)
#delivery_ country	Shipping country	Alphabets (50)
#delivery_ tel	Shipping phone number	Numeric (22)
#merchant_param1	Additional information about the transaction sent by the merchant.	Alphanumeric (100)
#merchant_param2	Additional information about the transaction sent by the merchant.	Alphanumeric (100)
#merchant_param3	Additional information about the transaction sent by the merchant.	Alphanumeric (100)
#merchant_param4	Additional information about the transaction sent by the merchant.	Alphanumeric (100)
#merchant_param5	Additional information about the transaction sent by the merchant.	Alphanumeric (100)
#vault	This parameter can be used if merchant availing the vault option. On using vault functionality if card details are saved at CCAvenue end value returned will be Y. If card details are not saved at CCAvenue end the value returned for this parameter will be N.	Character (1)
#offer_type	This parameter can be used for sending additional information if customer has used any discount or promotion while completing the transaction. If customer is using discount-coupon, value of this parameter would be discount. If customer is using promo-code, value of this parameter would be promotion.	Alphabets (9)
#offer_code	This parameter can be used for sending additional information about the discount coupon and Promo code used while completing the transaction. If customer has used Discount the value sent would be Discount code. If customer has used Promotion the value sent would be Promo code.	Alphanumeric (30)
#discount_value	This parameter can be used for sending additional information about the discounted amount.	Numeric (12,2)





import uuid
from django.views.decorators.csrf import csrf_exempt
from django.contrib.auth.decorators import login_required
from mcms.templatetags.front_tags import *

# amount options
#converted_amounts = {'int-1':get_rupee(12), 'int-2':get_rupee(50),'ind-1':'700', 'ind-2':'1000', 'ind-3':'1800', 'ind-4':'2800','ind-5':'1200','ind-6':'1400','ind-7':'5000','ind-8':'10000'}
converted_amounts = {'int-1':get_rupee(12), 'int-2':get_rupee(50),'ind-1':'1', 'ind-2':'1000', 'ind-3':'1800', 'ind-4':'2800','ind-5':'1200','ind-6':'1400','ind-7':'5000','ind-8':'10000','ind-9':'20000'}

def get_currency(val):
    a = ''
    if val == "int-1" or val == "int-2":
        a = "USD"
    else:
        a = "INR"
    return a

def subscribe2(request):
    access_code = True
    if request.method=='POST':
        amount = request.POST.get('amount')

    return render(request,'newsubscriber.html',locals())

def get_display_name(str_obj):
    if str_obj =='ind-1' or str_obj == 'int-1':
        val = 'One Year Digital Plan'
    elif str_obj =='ind-5' or str_obj=='ind-6' or str_obj == 'int-2':
        val = 'One Year Print+Digital Plan'
    else:
        val = 'Become a special donor'
    return val

@csrf_exempt
def subscribe1(request, key=''):
    sub = request.GET.get('sub')
    detailname=get_display_name(sub)
    # your merchant_id
    merchant_id = 20756
    # unique id refered as order id
    oid = uuid.uuid4()
    if not key:
        order_id = str(oid)[:30]
    else:
        current_year = datetime.now().year
        next_year = current_year + 1
        bs = BookSubscribers.objects.filter(subscription__status="Success").count()
        bs_count = '%03d' % (bs+1)
        order_id = "TWC/"+str(current_year)+"-"+str(next_year)[-2:]+"/"+str(bs_count)
    # your access_code 
    #access_code = "AVDR07CL79AH85RDHA"
    access_code = "AVZC00BA44CA22CZAC"
    # your working_key
    #working_key = "E5CDBE681CFF546125D07DB455CAE725"
    #working_key = "4F90D628E4A130BD0F2AD03E84D05892"
    working_key = "2AF08497DFEDB4424306C27C0BFE5102"
    # for testing we can use thsi url
    test_url = "https://test.ccavenue.com"
    production_url = "https://secure.ccavenue.com"
    # Currency in which you want to process the transaction. 
    # INR - Indian Rupee
    # USD - United States Dollar
    # SGD - Singapore Dollar
    # GBP - Pound Sterling
    # EUR - Euro, official currency of Eurozone
    currency = "INR"
    # CCAvenue billing page is multi-lingual. Currently we are displaying the page in following Languages
    # en - English
    # hi - Hindi
    # gu - Gujarati
    # mr - Marathi
    # bn - Bengali
    language ="en"
    # CCAvenue will post the status of the order along with the parameters to this URL. 
    # If you do not send this value, order status will be sent back to the URL configured in dynamic event notifications module in your MARS account. 
    # If there is no URL configured in the MARS account, PG will display the status of the order on the CCAvenue confirmation page.
    redirect_url = "http://www.civilsocietyonline.com/subscribe/redirect/"
    # CCAvenue will redirect the customer to this URL if the customer cancels the transaction on the billing page.
    cancel_url = "http://www.civilsocietyonline.com/subscribe/redirect/"
    if request.method == "POST":
        p_merchant_id = request.POST.get('merchant_id')
        p_order_id = request.POST.get('order_id')
        p_currency = request.POST.get('currency')
        amount = request.POST.get('amount')
        profession = request.POST.get('billing_profession')
        year = 1
        p_redirect_url = request.POST.get('redirect_url')
        p_cancel_url = request.POST.get('cancel_url')
        p_language = request.POST.get('language')
        p_billing_name = request.POST.get('billing_name')
        p_billing_address = request.POST.get('billing_address')
        p_billing_city = request.POST.get('billing_city')
        p_billing_state = request.POST.get('billing_state')
        p_billing_zip = request.POST.get('billing_zip')
        p_billing_country = request.POST.get('billing_country')
        try:
            cnt = Country.objects.get(id = request.POST.get('billing_country'))
        except:
            error = "Please select country"
            return render(request, 'subscribe.html', locals())
        if not p_billing_name or not p_billing_address or not p_billing_city or not p_billing_state or not p_billing_zip:
            error = "Please fill all data"
            return render(request, 'subscribe.html', locals()) 
        if cnt:
            if not key:
                p_amount = str(converted_amounts[amount])
            else:
                if cnt.name == 'India':
                    shiping_charge = int(profession) * 50
                else:
                    shiping_charge = int(profession) * 175
                p_amount = str((390 * int(profession)) + (shiping_charge))
            p_billing_country = cnt.name
            p_billing_tel = request.POST.get('billing_tel')
            p_billing_email = request.POST.get('billing_email')
            subobj = Subscription.objects.create(name = p_billing_name, amount=p_amount, year = year, orderid=p_order_id, status="Pending", 
                                       email =p_billing_email, phone = p_billing_tel, address = p_billing_address, ptype=amount, 
                                       city = p_billing_city, state = p_billing_state, country = cnt, pincode= p_billing_zip)
            if key:
                BookSubscribers.objects.create(subscription=subobj, amount=p_amount, name=key)
            merchant_data='merchant_id='+p_merchant_id+'&'+'order_id='+p_order_id + '&' + "currency=" + p_currency + '&' + 'amount=' + p_amount+'&'+'redirect_url='+p_redirect_url+'&'+'cancel_url='+p_cancel_url+'&'+'language='+p_language+'&'+'billing_name='+p_billing_name+'&'+'billing_address='+p_billing_address+'&'+'billing_city='+p_billing_city+'&'+'billing_state='+p_billing_state+'&'+'billing_zip='+p_billing_zip+'&'+'billing_country='+p_billing_country+'&'+'billing_tel='+p_billing_tel+'&'+'billing_email='+p_billing_email+'&'+'delivery_name='+p_billing_name+'&'+'delivery_address='+p_billing_address+'&'+'delivery_city='+p_billing_city+'&'+'delivery_state='+p_billing_state+'&'+'delivery_zip='+p_billing_zip+'&'+'delivery_country='+p_billing_country+'&'+'delivery_tel='+p_billing_tel+'&'
            encryption = encrypt(merchant_data,working_key)
            
        return render(request, 'payment.html', locals())
    return render(request, 'subscribe.html', locals())

import ast
import string
import random

@csrf_exempt
def subscribe_redirect(request):
    sub = ''
    check = ''
    # after redirecting from CCAVENUE will call thsi function
    # by doing decryption and validating based on key and saving to database
    # working_key is for testing case "E5CDBE681CFF546125D07DB455CAE725"
    #working_key = "4F90D628E4A130BD0F2AD03E84D05892"
    working_key = "2AF08497DFEDB4424306C27C0BFE5102"
    decresp = decrypt(request.POST.get('encResp'),working_key)
    res = str(decresp.replace("&","', '").replace("=","':'").replace('\x02',"").replace("''","'None'").replace('\r','').replace('\n',''))
    resval = "{'%s'}" % res
    resdict = ast.literal_eval(resval)
    data = '<table border=1 cellspacing=2 cellpadding=2><tr><td>'
    data = data + decresp.replace('=','</td><td>')
    data = data.replace('&','</td></tr><tr><td>')
    data = data + '</td></tr></table>'
    oid = resdict['order_id']
    bill_name = resdict['billing_name']
    mer_amount = resdict['mer_amount']
    bs_obj = ''
    try:
        sub = Subscription.objects.filter(orderid=oid, name=bill_name).latest('id')
    except:
        pass
    try:
        bs_obj = BookSubscribers.objects.get(subscription=sub)
    except:
        pass
    if sub:
        userobj = ''
        check = ''
        sub.status = resdict['order_status']
        sub.txnid = resdict['tracking_id']
        sub.bankref = resdict['bank_ref_no']
        sub.payment_mode = resdict['payment_mode']
        sub.amount = resdict['amount']
        sub.message = resdict['failure_message']
        sub.save()
        pwd = ''.join(random.sample(string.letters*5,8))
        try:
            check = User.objects.get(username = sub.email)
        except:
            pass
        if check:
            check.set_password(pwd)
            check.save()
            userobj = check
        else:
            userobj = User.objects.create_user(username = sub.email, email=sub.email, password = pwd)
        if resdict['order_status'] == "Success":
            if not bs_obj:
                template = get_template('subscriber_email.html')
                subject = "Thank you for subscribing to Civil Society"
                context = Context({'username':userobj.username,'pwd':pwd})
                content = template.render(context)
                sender_mail = "subscriptions@civilsocietyonline.com"
                email5 = EmailMessage(subject, content, sender_mail,[sub.email,'response@civilsocietyonline.com','umesh@civilsocietyonline.com',],headers = {'Reply-To': sender_mail})
                email5.content_subtype = "html"
               # try:
                email5.send()
                #except:
                 #   pass
                template = get_template('subscriber_another_email.html')
                subject = "YOUR CIVIL SOCIETY SUBSCRIPTION"
                context = Context({})
                content = template.render(context)
                sender_mail = "subscriptions@civilsocietyonline.com"
                email6 = EmailMessage(subject, content, sender_mail,[sub.email,'response@civilsocietyonline.com','umesh@civilsocietyonline.com',],headers = {'Reply-To': sender_mail})
                email6.content_subtype = "html"
                # try:
                email6.send()
                # except:
                #    pass
            else:
                template = get_template('watcher_subscriber_email.html')
                subject = "Thank you for buying The Water Catchers."
                context = Context({'username':""})
                content = template.render(context)
                sender_mail = "subscriptions@civilsocietyonline.com"
                email6 = EmailMessage(subject, content, sender_mail,[sub.email,'response@civilsocietyonline.com','umesh@civilsocietyonline.com',],headers = {'Reply-To': sender_mail})
                email6.content_subtype = "html"
                # try:
                email6.send()
            #    except:
             #       pass
    return render(request, 'redirect.html', locals())

def send_notification(sid):
    sub, check = '', ''
    try:
        sub = Subscription.objects.get(orderid=sid)
    except:
        pass
    pwd = ''.join(random.sample(string.letters*5,8))
    try:
        check = User.objects.get(username = sub.email)
    except:
        pass
    if check:
        check.set_password(pwd)
        check.save()
        userobj = check
    else:
        userobj = User.objects.create_user(username = sub.email, email=sub.email, password = pwd)
    if sub.status == "Success":
        template = get_template('subscriber_email.html')
        subject = "Thank you for subscribing to Civil Society"
        context = Context({'username':userobj.username,'pwd':pwd})
        content = template.render(context)
        sender_mail = "subscriptions@civilsocietyonline.com"
        email5 = EmailMessage(subject, content, sender_mail,[sub.email,'response@civilsocietyonline.com','umesh@civilsocietyonline.com',],headers = {'Reply-To': sender_mail})
        email5.content_subtype = "html"
        try:
            email5.send()
        except:
            pass
    print "mail sent"
    pass

